library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tb_control_unit is
    -- Testbench has no ports
end tb_control_unit;

architecture behavior of tb_control_unit is

    -- Component declaration for the Unit Under Test (UUT)
    component control_unit
        port(
            opcode    : in std_logic_vector(5 downto 0);
            funct     : in std_logic_vector(5 downto 0);
            Reg_Dst   : out std_logic;
            Jump      : out std_logic;
            Branch    : out std_logic;
            MemRead   : out std_logic;
            MemtoReg  : out std_logic;
            AluOp     : out std_logic_vector(3 downto 0);
            MemWrite  : out std_logic;
            ALUSrc    : out std_logic;
            RegWrite  : out std_logic
        );
    end component;

    -- Testbench signals
    signal opcode    : std_logic_vector(5 downto 0);
    signal funct     : std_logic_vector(5 downto 0);
    signal Reg_Dst   : std_logic;
    signal Jump      : std_logic;
    signal Branch    : std_logic;
    signal MemRead   : std_logic;
    signal MemtoReg  : std_logic;
    signal AluOp     : std_logic_vector(3 downto 0);
    signal MemWrite  : std_logic;
    signal ALUSrc    : std_logic;
    signal RegWrite  : std_logic;

begin

    -- Instantiate the Unit Under Test (UUT)
    uut: control_unit
        port map (
            opcode    => opcode,
            funct     => funct,
            Reg_Dst   => Reg_Dst,
            Jump      => Jump,
            Branch    => Branch,
            MemRead   => MemRead,
            MemtoReg  => MemtoReg,
            AluOp     => AluOp,
            MemWrite  => MemWrite,
            ALUSrc    => ALUSrc,
            RegWrite  => RegWrite
        );

    -- Stimulus process
    stimulus: process
    begin

        -- Test case 1: R-type instruction (add)
        opcode <= "000000";
        funct <= "100000";
        wait for 10 ns;

        -- Test case 2: Jump instruction
        opcode <= "000010";
        funct <= "------"; -- 'funct' is ignored for jump
        wait for 10 ns;

        -- Test case 3: Branch instruction (beq)
        opcode <= "000100";
        funct <= "------"; -- 'funct' is ignored for branch
        wait for 10 ns;

        -- Test case 4: Load word
        opcode <= "100011";
        funct <= "------"; -- 'funct' is ignored for load/store
        wait for 10 ns;

        -- Test case 5: Store word
        opcode <= "101011";
        funct <= "------"; -- 'funct' is ignored for load/store
        wait for 10 ns;

        -- Test case 6: R-type instruction (and)
        opcode <= "000000";
        funct <= "100100";
        wait for 10 ns;

        -- Add more test cases as needed...

        -- End simulation
        wait;
    end process;

end behavior;
